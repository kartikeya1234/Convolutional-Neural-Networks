# Importing the torch library

import torch as pt
import torch.nn as nn
import torchvision.transforms as transforms
import torch.nn.functional as F
import torch.optim as optim
import torchvision

# Creating the Convolutional neural network

class CNN(nn.Module):
    def __init__(self):
        super(CNN,self).__init__()
        self.conv_1_layer = nn.Conv2d(in_channels = 1,out_channels = 6,kernel_size = 5)
        self.conv_2_layer = nn.Conv2d(in_channels = 6,out_channels = 12,kernel_size = 5)

        self.linear_1_layer = nn.Linear(in_features=12*4*4,out_features=120)
        self.linear_2_layer = nn.Linear(in_features = 120,out_features = 60)
        self.outcome = nn.Linear(in_features=60,out_features=10)

    def forward(self,inp):
        #First Layer
        inp = inp
        inp = self.conv_1_layer(inp)
        inp = F.relu(inp)
        inp = F.max_pool2d(inp,kernel_size = 2,stride = 2)
        #Second Layer
        inp = self.conv_2_layer(inp)
        inp = F.relu(inp)
        inp = F.max_pool2d(inp,kernel_size = 2,stride = 2)
        # Fully connected
        inp = inp.reshape(-1,12*4*4)
        inp = self.linear_1_layer(inp)
        inp = F.relu(inp)
        inp = self.linear_2_layer(inp)
        inp = F.relu(inp)
        inp = self.outcome(inp) 
        
        return inp

# Initializing the class CNN, along with the training MNIST data set and Adam optimizer

model = CNN()
optimizer = optim.Adam(model.parameters(),lr = 0.01)
train_set = torchvision.datasets.MNIST(root = './data/MNIST',download=True,train = True,transform=transforms.Compose([transforms.ToTensor()]))
train_loader = pt.utils.data.DataLoader(train_set,batch_size = 100)

# Creating a method for calculating the total amount of correct predictions

def total_corr(pred,label):
  return pred.argmax(dim = 1).eq(label).sum().item()

# Perfroming epochs on the training dataset

for epoch in range(10):
    total_correct = 0
    total_loss = 0
    for batch in train_loader:
        images, labels = batch
        
        pred = model(images)
        
        loss = F.cross_entropy(pred,labels)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        total_loss += loss.item()
        total_correct += total_corr(pred,labels) 
    print('Total correct for epoch {} is : {} and total loss for the current epoch is {}'.format(epoch+1,total_correct,total_loss))

# Testing the model out on the test set

test_set = torchvision.datasets.MNIST(root = './data/MNIST',download=True,train = False,transform=transforms.Compose([transforms.ToTensor()]))
test_loader = pt.utils.data.DataLoader(test_set,batch_size = 10000)
batch = next(iter(test_loader))
images, labels = batch
Pred_test = model(images)
L = F.cross_entropy(Pred_test,labels)
print('The total number of predictions which were correct are {}.'.format(total_corr(P,la)))
